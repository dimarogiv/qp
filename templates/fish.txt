{%- let section = "# =============================================================================\n#" -%}
{%- let not_configured = "# -- not configured --" -%}

{{ section }}
# Utility functions for querypath.
#

# pwd based on the value of _QP_RESOLVE_SYMLINKS.
function __querypath_pwd
{%- if cfg!(windows) %}
    command cygpath -w (builtin pwd -P)
{%- else if resolve_symlinks %}
    builtin pwd -P
{%- else %}
    builtin pwd -L
{%- endif %}
end

# A copy of fish's internal cd function. This makes it possible to use
# `alias cd=z` without causing an infinite loop.
if ! builtin functions --query __querypath_cd_internal
    string replace --regex -- '^function cd\s' 'function __querypath_cd_internal ' <$__fish_data_dir/functions/cd.fish | source
end

# cd + custom logic based on the value of _QP_ECHO.
function __querypath_cd
    if set -q __querypath_loop
        builtin echo "querypath: infinite loop detected"
        builtin echo "Avoid aliasing `cd` to `z` directly, use `querypath init --cmd=cd fish` instead"
        return 1
    end

{%- if cfg!(windows) %}
    __querypath_loop=1 __querypath_cd_internal (cygpath -u $argv)
{%- else %}
    __querypath_loop=1 __querypath_cd_internal $argv
{%- endif %}
{%- if echo %}
    and __querypath_pwd
{%- endif %}
end

{{ section }}
# Hook configuration for querypath.
#

{% if hook == InitHook::None -%}
{{ not_configured }}

{%- else -%}
# Initialize hook to add new entries to the database.
{%- if hook == InitHook::Prompt %}
function __querypath_hook --on-event fish_prompt
{%- else if hook == InitHook::Pwd %}
function __querypath_hook --on-variable PWD
{%- endif %}
    test -z "$fish_private_mode"
    and command querypath add -- (__querypath_pwd)
end

{%- endif %}

{{ section }}
# When using querypath with --no-cmd, alias these internal functions as desired.
#

# Jump to a directory using only keywords.
function __querypath_z
    set -l argc (builtin count $argv)
    if test $argc -eq 0
        __querypath_cd $HOME
    else if test "$argv" = -
        __querypath_cd -
    else if test $argc -eq 1 -a -d $argv[1]
        __querypath_cd $argv[1]
    else if test $argc -eq 2 -a $argv[1] = --
        __querypath_cd -- $argv[2]
    else
        set -l result (command querypath query --exclude (__querypath_pwd) -- $argv)
        and __querypath_cd $result
    end
end

# Completions.
function __querypath_z_complete
    set -l tokens (builtin commandline --current-process --tokenize)
    set -l curr_tokens (builtin commandline --cut-at-cursor --current-process --tokenize)

    if test (builtin count $tokens) -le 2 -a (builtin count $curr_tokens) -eq 1
        # If there are < 2 arguments, use `cd` completions.
        complete --do-complete "'' "(builtin commandline --cut-at-cursor --current-token) | string match --regex -- '.*/$'
    else if test (builtin count $tokens) -eq (builtin count $curr_tokens)
        # If the last argument is empty, use interactive selection.
        set -l query $tokens[2..-1]
        set -l result (command querypath query --exclude (__querypath_pwd) --interactive -- $query)
        and __querypath_cd $result
        and builtin commandline --function cancel-commandline repaint
    end
end
complete --command __querypath_z --no-files --arguments '(__querypath_z_complete)'

# Jump to a directory using interactive search.
function __querypath_zi
    set -l result (command querypath query --interactive -- $argv)
    and __querypath_cd $result
end

{{ section }}
# Commands for querypath. Disable these using --no-cmd.
#

{%- match cmd %}
{%- when Some with (cmd) %}

abbr --erase {{cmd}} &>/dev/null
alias {{cmd}}=__querypath_z

abbr --erase {{cmd}}i &>/dev/null
alias {{cmd}}i=__querypath_zi

{%- when None %}

{{ not_configured }}

{%- endmatch %}

{{ section }}
# To initialize querypath, add this to your configuration (usually
# ~/.config/fish/config.fish):
#
#   querypath init fish | source
