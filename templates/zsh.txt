{%- let section = "# =============================================================================\n#" -%}
{%- let not_configured = "# -- not configured --" -%}

# shellcheck shell=bash

{{ section }}
# Utility functions for querypath.
#

# pwd based on the value of _QP_RESOLVE_SYMLINKS.
function __querypath_pwd() {
{%- if cfg!(windows) %}
    \command cygpath -w "$(\builtin pwd -P)"
{%- else if resolve_symlinks %}
    \builtin pwd -P
{%- else %}
    \builtin pwd -L
{%- endif %}
}

# cd + custom logic based on the value of _QP_ECHO.
function __querypath_cd() {
    # shellcheck disable=SC2164
    \builtin cd -- "$@" {%- if echo %} && __querypath_pwd {%- endif %}
}

{{ section }}
# Hook configuration for querypath.
#

# Hook to add new entries to the database.
function __querypath_hook() {
    # shellcheck disable=SC2312
    \command querypath add -- "$(__querypath_pwd)"
}

# Initialize hook.
\builtin typeset -ga precmd_functions
\builtin typeset -ga chpwd_functions
# shellcheck disable=SC2034,SC2296
precmd_functions=("${(@)precmd_functions:#__querypath_hook}")
# shellcheck disable=SC2034,SC2296
chpwd_functions=("${(@)chpwd_functions:#__querypath_hook}")

{%- if hook == InitHook::Prompt %}
precmd_functions+=(__querypath_hook)
{%- else if hook == InitHook::Pwd %}
chpwd_functions+=(__querypath_hook)
{%- endif %}

# Report common issues.
function __querypath_doctor() {
{%- if hook == InitHook::None %}
    return 0

{%- else %}
    [[ ${_QP_DOCTOR:-1} -ne 0 ]] || return 0

{%- if hook == InitHook::Prompt %}
    [[ ${precmd_functions[(Ie)__querypath_hook]:-} -eq 0 ]] || return 0
{%- else if hook == InitHook::Pwd %}
    [[ ${chpwd_functions[(Ie)__querypath_hook]:-} -eq 0 ]] || return 0
{%- endif %}

    _QP_DOCTOR=0
    \builtin printf '%s\n' \
        'querypath: detected a possible configuration issue.' \
        'Please ensure that querypath is initialized right at the end of your shell configuration file (usually ~/.zshrc).' \
        '' \
        'If the issue persists, consider filing an issue at:' \
        'https://github.com/dimarogiv/querypath/issues' \
        '' \
        'Disable this message by setting _QP_DOCTOR=0.' \
        '' >&2
{%- endif %}
}

{{ section }}
# When using querypath with --no-cmd, alias these internal functions as desired.
#

# Jump to a directory using only keywords.
function __querypath_z() {
    __querypath_doctor
    if [[ "$#" -eq 0 ]]; then
        __querypath_cd ~
    elif [[ "$#" -eq 1 ]] && { [[ -d "$1" ]] || [[ "$1" = '-' ]] || [[ "$1" =~ ^[-+][0-9]+$ ]]; }; then
        __querypath_cd "$1"
    elif [[ "$#" -eq 2 ]] && [[ "$1" = "--" ]]; then
        __querypath_cd "$2"
    else
        \builtin local result
        # shellcheck disable=SC2312
        result="$(\command querypath query --exclude "$(__querypath_pwd)" -- "$@")" && __querypath_cd "${result}"
    fi
}

# Jump to a directory using interactive search.
function __querypath_zi() {
    __querypath_doctor
    \builtin local result
    result="$(\command querypath query --interactive -- "$@")" && __querypath_cd "${result}"
}

{{ section }}
# Commands for querypath. Disable these using --no-cmd.
#

{%- match cmd %}
{%- when Some with (cmd) %}

function {{ cmd }}() {
    __querypath_z "$@"
}

function {{ cmd }}i() {
    __querypath_zi "$@"
}

{%- when None %}

{{ not_configured }}

{%- endmatch %}

# Completions.
if [[ -o zle ]]; then
    __querypath_result=''

    function __querypath_z_complete() {
        # Only show completions when the cursor is at the end of the line.
        # shellcheck disable=SC2154
        [[ "{{ "${#words[@]}" }}" -eq "${CURRENT}" ]] || return 0

        if [[ "{{ "${#words[@]}" }}" -eq 2 ]]; then
            # Show completions for local directories.
            _cd -/

        elif [[ "${words[-1]}" == '' ]]; then
            # Show completions for Space-Tab.
            # shellcheck disable=SC2086
            __querypath_result="$(\command querypath query --exclude "$(__querypath_pwd || \builtin true)" --interactive -- ${words[2,-1]})" || __querypath_result=''

            # Set a result to ensure completion doesn't re-run
            compadd -Q ""

            # Bind '\e[0n' to helper function.
            \builtin bindkey '\e[0n' '__querypath_z_complete_helper'
            # Sends query device status code, which results in a '\e[0n' being sent to console input.
            \builtin printf '\e[5n'

            # Report that the completion was successful, so that we don't fall back
            # to another completion function.
            return 0
        fi
    }

    function __querypath_z_complete_helper() {
        if [[ -n "${__querypath_result}" ]]; then
            # shellcheck disable=SC2034,SC2296
            BUFFER="{{ cmd.unwrap_or("cd") }} ${(q-)__querypath_result}"
            __querypath_result=''
            \builtin zle reset-prompt
            \builtin zle accept-line
        else
            \builtin zle reset-prompt
        fi
    }
    \builtin zle -N __querypath_z_complete_helper
{%- if let Some(cmd) = cmd %}

    [[ "${+functions[compdef]}" -ne 0 ]] && \compdef __querypath_z_complete {{ cmd }}
{%- endif %}
fi

{{ section }}
# To initialize querypath, add this to your shell configuration file (usually ~/.zshrc):
#
# eval "$(querypath init zsh)"
