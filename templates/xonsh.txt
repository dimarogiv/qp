{%- let section = "# =============================================================================\n#" -%}
{%- let not_configured = "# -- not configured --" -%}

# pylint: disable=missing-module-docstring

import builtins  # pylint: disable=unused-import
import os
import os.path
import subprocess
import sys
import typing

import xonsh.dirstack  # type: ignore # pylint: disable=import-error
import xonsh.environ  # type: ignore # pylint: disable=import-error

{{ section }}
# Utility functions for querypath.
#


def __querypath_bin() -> str:
    """Finds and returns the location of the querypath binary."""
    querypath = typing.cast(str, xonsh.environ.locate_binary("querypath"))
    if querypath is None:
        querypath = "querypath"
    return querypath


def __querypath_env() -> dict[str, str]:
    """Returns the current environment."""
    return builtins.__xonsh__.env.detype()  # type: ignore  # pylint:disable=no-member


def __querypath_pwd() -> str:
    """pwd based on the value of _QP_RESOLVE_SYMLINKS."""
{%- if resolve_symlinks %}
    pwd = os.getcwd()
{%- else %}
    pwd = __querypath_env().get("PWD")
    if pwd is None:
        raise RuntimeError("$PWD not found")
{%- endif %}
    return pwd


def __querypath_cd(path: str | bytes | None = None) -> None:
    """cd + custom logic based on the value of _QP_ECHO."""
    if path is None:
        args = []
    elif isinstance(path, bytes):
        args = [path.decode("utf-8")]
    else:
        args = [path]
    _, exc, _ = xonsh.dirstack.cd(args)
    if exc is not None:
        raise RuntimeError(exc)
{%- if echo %}
    print(__querypath_pwd())
{%- endif %}


class QuerypathSilentException(Exception):
    """Exit without complaining."""


def __querypath_errhandler(
    func: typing.Callable[[list[str]], None],
) -> typing.Callable[[list[str]], int]:
    """Print exception and exit with error code 1."""

    def wrapper(args: list[str]) -> int:
        try:
            func(args)
            return 0
        except QuerypathSilentException:
            return 1
        except Exception as exc:  # pylint: disable=broad-except
            print(f"querypath: {exc}", file=sys.stderr)
            return 1

    return wrapper


{{ section }}
# Hook configuration for querypath.
#

{% if hook == InitHook::None -%}
{{ not_configured }}

{%- else -%}
# Initialize hook to add new entries to the database.
if "__querypath_hook" not in globals():
{% if hook == InitHook::Prompt %}
    @builtins.events.on_post_prompt  # type: ignore  # pylint:disable=no-member
{%- else if hook == InitHook::Pwd %}
    @builtins.events.on_chdir  # type: ignore  # pylint:disable=no-member
{%- endif %}
    def __querypath_hook(**_kwargs: typing.Any) -> None:
        """Hook to add new entries to the database."""
        pwd = __querypath_pwd()
        querypath = __querypath_bin()
        subprocess.run(
            [querypath, "add", "--", pwd],
            check=False,
            env=__querypath_env(),
        )
{% endif %}

{{ section }}
# When using querypath with --no-cmd, alias these internal functions as desired.
#


@__querypath_errhandler
def __querypath_z(args: list[str]) -> None:
    """Jump to a directory using only keywords."""
    if args == []:
        __querypath_cd()
    elif args == ["-"]:
        __querypath_cd("-")
    elif len(args) == 1 and os.path.isdir(args[0]):
        __querypath_cd(args[0])
    else:
        try:
            querypath = __querypath_bin()
            cmd = subprocess.run(
                [querypath, "query", "--exclude", __querypath_pwd(), "--"] + args,
                check=True,
                env=__querypath_env(),
                stdout=subprocess.PIPE,
            )
        except subprocess.CalledProcessError as exc:
            raise QuerypathSilentException() from exc

        result = cmd.stdout[:-1]
        __querypath_cd(result)


@__querypath_errhandler
def __querypath_zi(args: list[str]) -> None:
    """Jump to a directory using interactive search."""
    try:
        querypath = __querypath_bin()
        cmd = subprocess.run(
            [querypath, "query", "-i", "--"] + args,
            check=True,
            env=__querypath_env(),
            stdout=subprocess.PIPE,
        )
    except subprocess.CalledProcessError as exc:
        raise QuerypathSilentException() from exc

    result = cmd.stdout[:-1]
    __querypath_cd(result)


{{ section }}
# Commands for querypath. Disable these using --no-cmd.
#

{%- match cmd %}
{%- when Some with (cmd) %}

builtins.aliases["{{cmd}}"] = __querypath_z  # type: ignore  # pylint:disable=no-member
builtins.aliases["{{cmd}}i"] = __querypath_zi  # type: ignore  # pylint:disable=no-member

{%- when None %}

{{ not_configured }}

{%- endmatch %}

{{ section }}
# To initialize querypath, add this to your configuration (usually ~/.xonshrc):
#
# execx($(querypath init xonsh), 'exec', __xonsh__.ctx, filename='querypath')
